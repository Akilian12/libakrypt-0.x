/*!
\mainpage Аннотация

Библиотека libakrypt представляет собой модуль, реализующий криптографические
преобразования для отечественного СКЗИ проекта OpenSKZI. Цель данного проекта заключается
в создании СКЗИ с открытым исходным кодом, удовлетворяющего отечественным
<a href="http://www.tc26.ru/standard/draft/%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF%D1%8B_14.11.2016.pdf">Принципам</a>
разработки и модернизации шифровальных (криптографических) средств защиты информации по классу КС3.

Библиотека написана на языке C и реализует механизмы генерации, хранения, экспорта и импорта ключей, а также
основные отечественные криптографические механизмы, включая алгоритмы шифрования/расшифрования данных, алгоритмы хеширования,
алгоритмы выработки и проверки электронной подписи и имитовставки.

Билиотека может исполняться на следующих архитектурах:
\li x86, x64
\li amd64
\li armv7

Библиотека может исполняться под управлением следующих операционных систем:
\li OC семейства Linux,
\li ОС семейства Windows (от Windows XP и старше)
\li ReactOS

Библиотека может быть собрана при помощи следующих компиляторов:
\li gcc (в частности mingw под Windows),
\li clang
\li Microsoft Visual Studio (начиная с версии MSVC10),
\li TinyCC.

В текущей версии библиотеки реализованы следующие криптографические механизмы:

\li Бесключевые функции хеширования.
    -# Функция хеширования, регламентируемая отечественным стандартом ГОСТ Р 34.11-94
       (в настоящее время стандарт отменен, функция реализована для возможности разбора
       сертификатов открытых ключей).
    -# Функции хеширования Стрибог-256 и Стрибог-512, регламентируемые
       отечественным стандартом ГОСТ Р 34.11-2012.

\li Алгоритмы блочного шифрования данных.
    -# Алгоритм блочного шифрования ГОСТ 28147-89 с длиной блока 64 бита и поддержкой
       различных таблиц замен (в настоящее время, согласно ГОСТ Р 34.12-2015, этот алгоритм
       с фиксированными таблицами замен носит название Магма).
    -# Алгоритм блочного шифрования Кузнечик с длиной блока 128 бит (согласно ГОСТ Р 34.12-2015).

\li Алгоритмы зашифрования/расшифрования сообщений c помощью алгоритмов блочного шифрования
    в следующих режимах (согласно ГОСТ Р 34.13-2015).
    -# Режим простой замены (electronic codebook mode, ЕСВ),
    -# Режим гаммирования (counter mode, CTR),
    -# Режим гаммирования с обратной связью по выходу (output feedback mode, OFB),
    -# Режим простой замены с зацеплением (cipher block chaining mode, СВС),
    -# Режим гаммирования с обратной связью по шифртексту (cipher feedback mode, CFB).

\li Алгоритмы выработки имитовставки (кода аутентичности сообщения)
    -# Алгоритм выработки имитовставки HMAC, использующий отечественные функции
    хеширования Стрибог-256 и Стрибог-512.
    -# Алгоритм выработки имитовставки, регламентированный ГОСТ Р 34.13-2015.

\li Программные и биологические генераторы псевдо-случайных чисел.
    -# Линейный конгруэнтный генератор,
    -# Интерфейс, использующий чтение из произвольных файлов, в частности,
       файловых устройств /dev/random и /dev/urandom.
    -# Интерфейс к системному генератору псевдо-случайных значений в Windows.

\b Внимание: в настоящее время библиотека находится в статусе разработки и не рекомендуется для
реальной защиты обрабатываемой пользователем информации.


\page compile Инструкция по сборке и установке

Флаги, передаваемые в cmake

 - LIBAKRYPT_STATIC_LIB = { ON, OFF }
 - LIBAKRYPT_SHARED_LIB = { ON, OFF }
 - LIBAKRYPT_EXT = { ".exe" }
 - LIBAKRYPT_CONF = { "/etc" }

Флаги, передаваемые в исходные тексты (при сборке библиотек и примеров)

 - LIBAKRYPT_HAVE_SYSLOG_H
 - LIBAKRYPT_HAVE_UNISTD_H
 - LIBAKRYPT_VERSION
 - LIBAKRYPT_OPTIONS_PATH

\page construction Принципы и механизмы реализации библиотеки

В этой главе мы опишем основные принципы, которые были использованы при написании исходных текстов библиотеки,
а также приведем описание способов их реализации. Мы начнем с некоторого формализма и
дадим определения используемых нами терминов.

\section construction_glossary Терминология

- \b Класс (class) - структура, определенная через typedef и содержащая в себе данные и указатели на функции,
обрабатывающие данные, хранящиеся в структуре. Один класс может соотвествовать нескольким однотипным
криптографическим механизмам, допускающим схожую программную реализацию.

- \b Объект (object) - область памяти (экземпляр класса), однозначно связанная с конкретным
криптографическим механизмом.

- \b Контекст (context) - указатель на объект заданного класса, однозначно с ним связанный.
Контекст может быть определен только в случае, когда существует связанный с ним объект.
В противном случае контекст обязан принимать значение NULL.

- \b Дескриптор (handle) - натуральное число, являющееся идентификатором конкретного объекта и
обеспечивающее доступ к объекту по его контексту.

- \b Производящая \b функция - функция, создающая объекты заданного класса.

\section construction_principles Принципы исполнения кода библиотеки.

Для максимального обеспечения безопасности исполняемого кода при реализации библиотеки
использовался приводимый далее набор принципов. Данные принципы должны соблюдаться при модификации библиотеки и
расширении ее функциональных возможностей.

- Следование стандарту С99 и максимальная кроссплатформенность. Исходные тексты, включаемые в состав библиотеки,
должны быть успешно скомпилированы и корректно исполнены для максимально возможного
числа компиляторов языка С и операционных систем.

- Минимально возможное использование внешних зависимостей и библиотек.

- Минимальное включение кода, то есть исключение из тела библиотеки фрагментов исходных текстов, которые реально
не используются или предоставляют мало востребованный пользовательский интерфейс.

- Следование отечественным принципам разработки средств криптографической защиты информации и
использование отечественных криптографических алгоритмов, регламентированных ГОСТ
и рекомендациями ТК26 "Криптографическая защита информации".

- Создание объекта конкретного класса возможно только с помощью производящей функции.
Любой другой механизм создания объектов считается недоспустимым.

- Описание конкретной реализации класса (полей структуры, типов, используемых при описании ее данных,
перечень функций обработки данных) не экспортируется и не может быть использован за
пределами исходных текстов библиотеки.

- В случае, если некоторая функциональность не может быть реализована без использования
не экспортируемых типов данных и функций, то данная функциональность должна быть включена в состав библиотеки
в соответсвии с данными принципами.

- Механизмы работы с контекстами (указателями на созданные в ходе выполнения кода библиотеки объекты)
не экспортируются.

- Для доступа к объектам, создаваемым библиотекой, используется механизм идентификаторов,
которые однозначно связываются с конкретными объектами.

- Значение идентификатора не должно нести в себе какой-либо информации о типе или каких-либо других характеристиках
объекта с которым связан идентификатор. Данная информация должна предоставляться пользователю
с помощью интерфейсных функций.

- При старте библиотеки должен производиться контроль ее работоспособности для всех реализованных
криптографических механизмов.

- При завершении работы библиотека должна самостоятельно контролировать очистку оперативной памяти,
выделенной в процессе ее работы.

- Библиотека должна вести аудит (логирование или трассировку) возникаемых в ходе ее выполнения ошибок исполнения программы.

- Максимальное документирование исходных текстов, включая не только описание аргументов
функций и возвращаемых значений, а также описание принципов реализации конкретных криптографических алгоритмов.
В документацию также должны включаться рекомендации по расширению функциональных возможностей библиотеки.


\section construction_generators Датчики случайных чисел

 Три типа ПДСЧ, биологические и физические

 в библиотеке: реализация ПДСЧ
   интерфейсы к биологическим датчикам
   интерфейсы к физическим в настоящее время не реализованы
*/
