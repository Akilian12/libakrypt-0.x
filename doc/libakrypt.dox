/*!
\mainpage Аннотация

Библиотека Libakrypt представляет собой модуль, реализующий криптографические
преобразования для отечественного СКЗИ проекта OpenSKZI. Цель данного проекта заключается
в создании СКЗИ с открытым исходным кодом, удовлетворяющего отечественным
принципам
разработки и модернизации шифровальных (криптографических) средств защиты информации по классу КС3
(более детально см. [здесь](http://www.tc26.ru/standard/draft/%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF%D1%8B_14.11.2016.pdf) ).

Библиотека написана на языке C и реализует механизмы генерации, хранения, экспорта и импорта ключей, а также
основные отечественные криптографические механизмы, регламентированные ГОСТ
или рекомендациями ТК26 "Криптографическая защита информации", включая:

\li Бесключевые функции хеширования.
    -# Функция хеширования, регламентируемая отечественным стандартом ГОСТ Р 34.11-94
       (в настоящее время стандарт отменен, функция реализована для возможности разбора
       сертификатов открытых ключей).
    -# Функции хеширования Стрибог-256 и Стрибог-512, регламентируемые
       отечественным стандартом ГОСТ Р 34.11-2012.

\li Алгоритмы блочного шифрования данных.
    -# Алгоритм блочного шифрования ГОСТ 28147-89 с длиной блока 64 бита и поддержкой
       различных таблиц замен (в настоящее время, согласно ГОСТ Р 34.12-2015, этот алгоритм
       с фиксированными таблицами замен носит название Магма).
    -# Алгоритм блочного шифрования Кузнечик с длиной блока 128 бит (согласно ГОСТ Р 34.12-2015).

\li Алгоритмы зашифрования/расшифрования сообщений c помощью алгоритмов блочного шифрования
    в следующих режимах (согласно ГОСТ Р 34.13-2015).
    -# Режим простой замены (electronic codebook mode, ЕСВ),
    -# Режим гаммирования (counter mode, CTR),
    -# Режим гаммирования с обратной связью по выходу (output feedback mode, OFB),
    -# Режим простой замены с зацеплением (cipher block chaining mode, СВС),
    -# Режим гаммирования с обратной связью по шифртексту (cipher feedback mode, CFB).

\li Алгоритмы выработки имитовставки (кода аутентичности сообщения)
    -# Алгоритм выработки имитовставки HMAC, использующий отечественные функции
    хеширования Стрибог-256 и Стрибог-512.
    -# Алгоритм выработки имитовставки, регламентированный ГОСТ Р 34.13-2015.

\li Программные и биологические генераторы псевдо-случайных чисел.
    -# Линейный конгруэнтный генератор,
    -# Интерфейс, использующий чтение из произвольных файлов, в частности,
       файловых устройств /dev/random и /dev/urandom.
    -# Интерфейс к системному генератору псевдо-случайных значений в Windows.

Работоспособность библиотеки протестирована на следующих платформа:
\li x86, x64,
\li amd64,
\li armv7.

Работоспособность библиотеки протестирована под управлением следующих операционных систем:
\li OC семейства Linux,
\li ОС семейства Windows (от Windows XP и старше)
\li ReactOS.

Библиотека может быть собрана при помощи следующих компиляторов:
\li gcc (в частности mingw под Windows),
\li clang,
\li Microsoft Visual Studio (начиная с версии MSVC10),
\li TinyCC.

\b Внимание: в настоящее время библиотека находится в статусе разработки и не рекомендуется для
реальной защиты обрабатываемой пользователем информации.


\page compile Инструкция по сборке и установке

\section compile_source_codes Получение исходных текстов библиотеки

Посленяя версия
исходных кодов библиотеки может быть получена из git-репозитория на сайте github.com.
Команда для клонирования репозитория.

\code
 git clone https://github.com/axelkenzo/libakrypt-0.x
\endcode

\section compile_dependence Зависимости библиотеки

Для корректной сборки и выполнения библиотеки Libakrypt необходимо
удовлетворить ряд внешних зависимостей.

\subsection compile_dependence_cmake CMake

Системой сборки для библиотеки Libakrypt является [cmake](https://cmake.org").
Необходимый набор программ и утилит может быть скачан с официального сайта программы.

\subsection compile_dependence_pthreads Pthreads

Библиотека Libakrypt использует многопоточное выполнение некоторых своих
функций, поэтому ей необходим базовый набор функций для работы с потоками.
Библиотека использует стандартный набор функций, определяемый POSIX Threads.

В операционной системе Linux эта функциональность входит в состав библиотеки `libc`.

В операционной системе Windows многопоточность
может быть реализована различными способами, при этом
способ реализации определяется используемым для сборки библиотеки компилятором.

В случае, если для сборки библиотеки используется компилятор `gcc`, входящий в состав набора библиотек и программ `MinGW`,
то доступ к многопоточной функциональности предоставляется средствами `MinGW`.

В случае, если для сборки библиотеки используется компилятор Microsoft Visual C (или любой другой,
в состав которого не входят библиотеки, реализующие многопоточную функциональность),
то необходимо использование разделяемой
библиотеки pthreads-w32 (POSIX Threads Library for Win32).
Перед сборкой библиотеки Libakrypt Вам необходимо вручную установить заголовочные и библиотечные файлы
(`pthreadVC.lib` и `pthreadVC.dll`, а также заголовочные файлы `pthread.h`, `semaphore.h` и `sched.h`).
Более подробно смотри в документации по [pthreads-w32](http://sources.redhat.com/pthreads-win32).


\section compile_make_unix Сборка в Linux

Linux является основной средой разработки библиотеки Libakrypt,
в связи с этим сборка в Linux является максимально простой процедурой.
Скачайте архив с исходными текстами библиотеки вида libakrypt-0.x.tar.bz2 и
сохраните его.
Перейдите в консоли в каталог с сохраненной библиотекой и для разархивации архива с исходными кодами
выполните следующую команду.
\code
tar -xjvf libakrypt-0.x.tar.bz2
\endcode

После ее выполнения должен появиться каталог libakrypt-0.x, где x это
номер текущей версии библиотеки (такой же каталог должен появиться после клонирования
исходных текстов библиотеки из git-репозитория).
Далее, для сборки библиотеки выполните следующую последовательность команд.

\code
mkdir build
cd build
cmake ../libakrypt-0.x
make
\endcode

В результате сборки, по-умолчанию, будет собрана
статическая версия библиотеки --- `libakrypt-static.a`,
а также тестовые примеры, использованные нами в разделе \ref libex.

Для сборки не только статической, но и динамической версии библиотеки --- `libakrypt-shared.so`,
необходимо выполнить команду `cmake` с дополнительными параметрами.

\code
cmake -D LIBAKRYPT_SHARED_LIB=ON ../libakrypt-0.x
\endcode



\subsection compile_make_compilers Сборка различными компиляторами

Приведенная нами выше последовательность команд использует для сборки библиотеки
компилятор по-умолчанию, то есть `gcc`. Если Вы хотите использовать другой компилятор,
то Вам необходимо передать в вызов `cmake` дополнительные опции.
Так, следующий вызов позволит произвести сборку библиотеки с помощью компилятора `clang`.
\code
cmake -D CMAKE_C_COMPILER=clang ../libakrypt-0.x
\endcode

В приведенной команде для передачи имени компилятора
используется определяемый `cmake` флаг `CMAKE_C_COMPILER`.

Аналогично, следующий вызов позволит произвести сборку библиотеки с помощью
компилятора `tcc` (Tiny C Compiler)
\code
cmake -D CMAKE_C_COMPILER=tcc ../libakrypt-0.x
\endcode

Отметим, что через опцию `CMAKE_C_COMPILER` можно указывать только те компиляторы, которые установлены в Вашей
системе и поддерживаются `cmake`.
Перечень поддерживаемых компиляторов можно найти в документации по `cmake`
(см. раздел cmake-compile-features, supported compilers).

\subsection compile_make_ellcc Сборка под другие платформы

Помимо традиционной сборки, когда библиотека компилируется и выполняется
на одной и той же платформе, можно реализовать процесс сборки, при которой эти платформы различаются.

Мы рассмотрим случай в котором платформой сборки (host system)
является Linux, а платформой выполнения (target system) --- любая другая
операционная система, например, Windows или Linux на ARM Cortex.
Для такой сборки наиболее удобным является компилятор `clang`,
или более точно, его сборка из проекта [ellcc](http://ellcc.org).
В данном проекте компилятору `clang` присвоено имя `ecc`.

Обязательным параметром, который должен передаваться компилятору `ecc`
является платформа (target system), на которой будет выполняться компилируемая программа.
Например, для сборки библиотеки под 64-x битную версию Windows (на архитектуре x64),
можно выполнить следующую команду.

\code
cmake -D CMAKE_C_COMPILER=ecc -D CMAKE_C_FLAGS="-target x86_64-w64-mingw32" -D LIBAKRYPT_EXT=".exe" -D LIBAKRYPT_CONF="C:/Users/Default/AppData/Roaming/libakrypt" ../../libakrypt-0.x
\endcode

Прокомментируем приведенные выше параметры команды `cmake`.

Как и ранее, имя компилятора передается через переменную `CMAKE_C_COMPILER` (в нашем примере это `ecc`),
платформа сборки передаается в `cmake` через переменную `CMAKE_C_FLAGS` (-target x86_64-w64-mingw32).
Параметр `LIBAKRYPT_EXT` (.exe) указывает расширение для исполняемых файлов (это актуально только для Windows),
а параметр `LIBAKRYPT_CONF` - каталог, в котором будет находиться файл с эксплуатационными характеристиками
библиотеки (см. также раздел \ref compile_flags).

\subsection compile_make_install Инсталляция библиотеки

По умолчанию предполагается, что библиотека будет установлена в каталог `/usr/local`.
Для изменения этого каталога
можно передать в `cmake` путь установки в явном виде. Например, следующий вызов позволяет
установить библиотеку в католог `/usr`.
\code
cmake -DCMAKE_INSTALL_PREFIX=/usr ../libakrypt-0.x
\endcode

Для инсталляции библиотеки достаточно выполнить команду

\code
make install
\endcode

\b Внимание. Команда инсталляции библиотеки должна выполняться с правами суперпользователя.

\subsection compile_doc_linux Сборка документации в Linux

В операционной системе Linux Вы можете воспользоваться
готовыми средствами для создания документации к библиотеке Libakrypt.

Если у Вас установлен пакет [Doxygen](http://www.doxygen.org/index.html),
а также установлена система подготовки документации LaTex,
то сборка документации может быть выполнена следующей простой командой.

\code
make doc
\endcode

Данная команда должна выполняться в том же каталоге,
в котором происходила сборка библиотеки. После выполнения команды,
в каталоге сборки должны появиться

- файл `libakrypt-doc-0.x.pdf`, содержащий документацию в формате PDF (файл формируется с помощью системы подготовки
  документации LaTeX),
- файл `libakrypt-0.x.qch`, содержащий документацию в формате QCH (удобно интегрируется в среду разработки QtCreator),
- архив `libakrypt-html-0.x.tar.bz2`, содержащий в архивированном виде
  документацию к библиотеке в формате HTML.


\section compile_make_windows Сборка в Windows

Ранее мы описали способ сборки библиотеки с
использованием компилятора `clang` из проекта `ellcc` (см. раздел \ref compile_make_ellcc).
Этот способ позволяет собирать статические исполняемые файлы,
но не позволяет собрать динамическую библиотеку.

Вместе с тем, библиотека Libakrypt может быть напрямую собрана в операционной системе Windows.
Далее мы приведем описание процесса сборки.


\subsection compile_make_windows_msvc Сборка с использованием компилятора Miscrosoft Visual C
На настоящий момент протестирована успешная
сборка библиотеки с помощью компилятора MSVC версий 10 и старше.

Для сборки библиотеки и тестовых примеров необходимо запустить командную строку Visual Studio и
создать каталог для сборки, например, выполнив команду
\code
mkdir build-msvc
\endcode

Далее, необходимо перейти в созданный каталог и запустить `cmake` для конфигурации сборки.

\code
cmake -G "NMake Makefiles" path
\endcode
где `path` это путь к каталогу, в котором находятся исходные коды библиотеки, например, `../libakrypt-0.x`.
Далее сборка библиотеки и тестовых примеров выполняется следующей командой
\code
nmake
\endcode

Указанный выше пример повзолит создать статическую (.lib) библиотеку и тестовые примеры. Для сборки
динамической (.dll) версии библиотеки необходимо
дополнительно указать соответствующий флаг при вызове `cmake`.

\code
cmake -G "NMake Makefiles" -D LIBAKRYPT_SHARED_LIB=ON path
\endcode

Для запуска тестовых примеров,
собранных с поддержкой динамических библиотек,
необходимо, чтобы созданном Вами каталоге build находился файл pthreadVC2.dll.

\subsection compile_make_windows_mingw Сборка с использованием MinGW
Для сборки компилятором `gcc` Вам необходимо установить набор программ из проекта MinGW.
Далее, в командной строке выполнить следующую последовательность команд.

\code
mkdir build
cd build
cmake -G "MinGW Makefiles" ../libakrypt-0.x
mingw32-make.exe
\endcode

Аналогично сказанному выше, для сборки
динамической библиотеки и тестовых примеров, соранных с поддержкой динамических библиотек,
необходимо выполнить следующую последовательность команд.

\code
mkdir build
cd build
cmake -G "MinGW Makefiles" -D LIBAKRYPT_SHARED_LIB=ON ../libakrypt-0.x
mingw32-make.exe
\endcode

\section compile_make_hands Сборка своими руками

Иногда может возникнуть ситуация, при которой
использование `cmake` для сборки библиотеки может оказаться невозможным.
Как правило такая ситуация возникает
в случае, когда инсталляция `cmake` невозможна, либо используется незнакомый для `cmake` компилятор языка C.
В таких случаях сборка библиотеки, а также сборка тестовых примеров, возможна из командной строки.

Общая схема командной строки для сборки тестовых примеров проста:

- компилятор
- параметры сборки
- имена файлов
- имя результирующей программы.

Следующий простой вызов из командной строки в Linux
позволяет собрать один из тестовых примеров (в корневом каталоге библиотеки).

\code
gcc -Isource -O3 -DLIBAKRYPT_CONF=\"/etc\" source/*.c examples/example-intro.c -o intro
\endcode

Как мы говорили выше, параметр LIBAKRYPT_CONF пределяет каталог в котором библиотека
будет искать файл с настройками (подробнее смотри в разделе \ref options).
Если данный параметр не указан, то месторасположение файла с настройками будет
выбрано библиотекой самостоятельно.

\section compile_flags Полные перечни флагов сборки библиотеки

\subsection compile_flags_cmake Флаги cmake

Приведем перечень флагов, которые могут передаваться в `cmake` для настройки и уточнения значений
параметров сборки.

\li `LIBAKRYPT_CONF = path` (устанавливает каталог поиска файла libakrypt.conf, содержащего точные
значения технических характеристик библиотеки)

\li `LIBAKRYPT_EXT = extension` (устанавливает расширение для скомпилированных контрольных примеров, используется, как правило,
для установки расширения `.exe` в операционной системе Windows)

\li `LIBAKRYPT_GMP_TESTS = { ON, OFF }` (устанавливает надо или нет собирать тестовые примеры, использующие
вызовы функций библиотеки libgmp; данная функциональность нужна только для тестирования корректности реализации
арифметических операций с вычетами кольца больших целых чисел)

\li `LIBAKRYPT_SHARED_LIB = { ON, OFF }` (устанавливает надо или нет собирать динамическую версию библиотеки, по умолчанию,
флаг равен `OFF`)

\li `LIBAKRYPT_STATIC_LIB = { ON, OFF }` (устанавливает надо или нет собирать статическую версию библиотеки, по умолчанию,
флаг равен `ON`)

\subsection compile_flags_source Флаги исходных кодов

Приведем полный перечень флагов компиляции, передаваемых при сборке исходных кодов библиотеки и примеров
с помощью директивы `-D`.
В большинстве случаев, поиск и установка флагов выполняется программой cmake.

\li `LIBAKRYPT_HAVE_SYSLOG_H` (указывает на то, что при компиляции необходимо использовать заголовочный файл `syslog.h`)
\li `LIBAKRYPT_HAVE_UNISTD_H` (указывает на то, что при компиляции необходимо использовать заголовочный файл `unistd.h`)
\li `LIBAKRYPT_OPTIONS_PATH = path` (устанавливает каталог для поиска файла libakrypt.conf, содержащего точные
значения технических характеристик библиотеки)
\li `LIBAKRYPT_VERSION = version` (устанавливает номер библиотеки)

\page construction Принципы и механизмы реализации библиотеки

В этой главе мы опишем основные принципы, которые были использованы при написании исходных текстов библиотеки,
а также приведем описание способов их реализации. Мы начнем с некоторого формализма и
дадим определения используемых нами терминов.

\section construction_glossary Терминология

- \b Класс (class) - структура, определенная через typedef и содержащая в себе данные и указатели на функции,
обрабатывающие данные, хранящиеся в структуре. Один класс может соотвествовать нескольким однотипным
криптографическим механизмам, допускающим схожую программную реализацию.

- \b Объект (object) - область памяти (экземпляр класса), однозначно связанная с конкретным
криптографическим механизмом.

- \b Контекст (context) - указатель на объект заданного класса, однозначно с ним связанный.
Контекст может быть определен только в случае, когда существует связанный с ним объект.
В противном случае контекст обязан принимать значение NULL.

- \b Дескриптор (handle) - натуральное число, являющееся идентификатором конкретного объекта и
обеспечивающее доступ к объекту по его контексту.

- \b Производящая \b функция - функция, создающая объекты заданного класса.

\section construction_names Принципы наименования функций библиотеки.

\section construction_principles Принципы создания исходных текстов библиотеки.

Для максимального обеспечения безопасности исполняемого кода при реализации библиотеки
использовался приводимый далее набор принципов. Данные принципы должны соблюдаться при модификации библиотеки и
расширении ее функциональных возможностей.

- Следование стандарту С99 и максимальная кроссплатформенность. Исходные тексты, включаемые в состав библиотеки,
должны быть успешно скомпилированы и корректно исполнены для максимально возможного
числа компиляторов языка С и операционных систем.

- Минимально возможное использование внешних зависимостей и библиотек.

- Минимальное включение кода, то есть исключение из тела библиотеки фрагментов исходных текстов, которые реально
не используются или предоставляют мало востребованный пользовательский интерфейс.

- Создание объекта конкретного класса возможно только с помощью производящей функции.
Любой другой механизм создания объектов считается недоспустимым.

- Описание конкретной реализации класса (полей структуры, типов, используемых при описании ее данных,
перечень функций обработки данных) не экспортируется и не может быть использован за
пределами исходных текстов библиотеки.

- В случае, если некоторая функциональность не может быть реализована без использования
не экспортируемых типов данных и функций, то данная функциональность должна быть включена в состав библиотеки
в соответсвии с данными принципами.

- Механизмы работы с контекстами (указателями на созданные в ходе выполнения кода библиотеки объекты)
не экспортируются.

- Для доступа к объектам, создаваемым библиотекой, используется механизм идентификаторов,
которые однозначно связываются с конкретными объектами.

- Значение идентификатора не должно нести в себе какой-либо информации о типе или каких-либо других характеристиках
объекта с которым связан идентификатор. Данная информация должна предоставляться пользователю
с помощью интерфейсных функций.

- При старте библиотеки должен производиться контроль ее работоспособности для всех реализованных
криптографических механизмов.

- При завершении работы библиотека должна самостоятельно контролировать очистку оперативной памяти,
выделенной в процессе ее работы.

- Библиотека должна вести аудит возникаемых в ходе ее выполнения ошибок исполнения программы.

- Максимальное документирование исходных текстов, включая не только описание аргументов
функций и возвращаемых значений, а также описание принципов реализации конкретных криптографических алгоритмов.
В документацию также должны включаться рекомендации по расширению функциональных возможностей библиотеки.


\section construction_generators Датчики случайных чисел

 Три типа ПДСЧ, биологические и физические

 в библиотеке: реализация ПДСЧ
   интерфейсы к биологическим датчикам
   интерфейсы к физическим в настоящее время не реализованы
*/
