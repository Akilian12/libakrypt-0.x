/* ----------------------------------------------------------------------------------------------- */
/*  Copyright (c) 2014 - 2018 by Axel Kenzo, axelkenzo@mail.ru                                     */
/*                                                                                                 */
/*  Файл ak_skey.h                                                                                 */
/*  - содержит описания функций, предназначенных для хранения и обработки ключевой информации.     */
/* ----------------------------------------------------------------------------------------------- */
#ifndef __AK_skey_context_H__
#define __AK_skey_context_H__

/* ----------------------------------------------------------------------------------------------- */
 #include <ak_hash.h>

/* ----------------------------------------------------------------------------------------------- */
/* Предварительные описания ключевых структур */
 struct skey;
/*! \brief Указатель на структуру секретного ключа. */
 typedef struct skey *ak_skey;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Однопараметрическая функция для проведения действий с секретным ключом, возвращает код ошибки. */
 typedef int ( ak_function_skey )( ak_skey );
/*! \brief Однопараметрическая функция для проведения действий с секретным ключом, возвращает истину или ложь. */
 typedef ak_bool ( ak_function_skey_check )( ak_skey );

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Структура для хранения ресурса ключа. */
 typedef union resource {
  /*! \brief счетчик числа использований, например, зашифрованных/расшифрованных блоков. */
   ak_int64 counter;
 } *ak_resource;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Перечисление, определяющее флаги хранения и обработки секретного ключа. */
 typedef enum {
  /*! \brief Младший (нулевой) бит отвечает за установку значения ключа:
             0 - ключ не установлен, 1 установлен. */
   skey_flag_set_key = 0x01LL,
  /*! \brief Первый бит отвечает за установку маски:
             0 - маска не установлена, 1 - маска установлена. */
   skey_flag_set_mask = 0x02LL,
  /*! \brief Второй бит отвечает за установку контрольной суммы ключа:
             0 - контрольная сумма не установлена не установлена, 1 - контрольная сумма установлена. */
   skey_flag_set_icode = 0x04LL,
  /*! \brief Третий бит отвечает за очистку дополнительных данных:
             0 - очистка не производится, 1 - для указателя `data` вызывается free. */
   skey_flag_data_free = 0x08LL
 } skey_flags;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Структура секретного ключа -- базовый набор данных и методов контроля. */
 struct skey {
  /*! \brief ключ */
   struct buffer key;
  /*! \brief маска ключа */
   struct buffer mask;
  /*! \brief контрольная сумма ключа */
   struct buffer icode;
  /*! \brief уникальный номер ключа */
   struct buffer number;
  /*! \brief генератор случайных масок ключа */
   struct random generator;
  /*! \brief ресурс использования ключа */
   union resource resource;
  /*! \brief указатель на внутренние данные ключа */
   ak_pointer data;
  /*! \brief OID алгоритма для которого предназначен секретный ключ */
   ak_oid oid;
 /*! \brief Флаги текущего состояния ключа */
   skey_flags flags;

  /*! \brief указатель на функцию маскирования ключа */
   ak_function_skey *set_mask;
  /*! \brief указатель на функцию демаскирования ключа */
   ak_function_skey *unmask;
  /*! \brief указатель на функцию выработки контрольной суммы от значения ключа */
   ak_function_skey *set_icode;
  /*! \brief указатель на функцию проверки контрольной суммы от значения ключа */
   ak_function_skey_check *check_icode;
};

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Инициализация структуры секретного ключа. */
 int ak_skey_context_create( ak_skey , size_t , size_t );
/*! \brief Очистка структуры секретного ключа. */
 int ak_skey_context_destroy( ak_skey );
/*! \brief Присвоение секретному ключу уникального номера. */
 int ak_skey_context_set_unique_number( ak_skey );
/*! \brief Присвоение секретному ключу константного значения. */
 int ak_skey_context_set_key( ak_skey , const ak_pointer , const size_t , const ak_bool );
/*! \brief Присвоение секретному ключу случайного значения. */
 int ak_skey_context_set_key_random( ak_skey , ak_random );
/*! \brief Присвоение секретному ключу значения, выработанного из пароля */
 int ak_skey_context_set_key_from_password( ak_skey , const ak_pointer , const size_t ,
                                                                 const ak_pointer , const size_t );
/* ----------------------------------------------------------------------------------------------- */
/*! \brief Наложение или смена маски путем сложения по модулю 2 случайной последовательности с ключом. */
 int ak_skey_context_set_mask_xor( ak_skey );
/*! \brief Снятие маски с ключа. */
 int ak_skey_context_unmask_xor( ak_skey );
/*! \brief Вычисление значения контрольной суммы ключа. */
 int ak_skey_context_set_icode_xor( ak_skey );
/*! \brief Проверка значения контрольной суммы ключа. */
 ak_bool ak_skey_context_check_icode_xor( ak_skey );

#endif
/* ----------------------------------------------------------------------------------------------- */
/*                                                                                      ak_skey.h  */
/* ----------------------------------------------------------------------------------------------- */
