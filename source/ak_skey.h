/* ----------------------------------------------------------------------------------------------- */
/*  Copyright (c) 2014 - 2017 by Axel Kenzo, axelkenzo@mail.ru                                     */
/*                                                                                                 */
/*  Разрешается повторное распространение и использование как в виде исходного кода, так и         */
/*  в двоичной форме, с изменениями или без, при соблюдении следующих условий:                     */
/*                                                                                                 */
/*   1. При повторном распространении исходного кода должно оставаться указанное выше уведомление  */
/*      об авторском праве, этот список условий и последующий отказ от гарантий.                   */
/*   2. При повторном распространении двоичного кода должна сохраняться указанная выше информация  */
/*      об авторском праве, этот список условий и последующий отказ от гарантий в документации     */
/*      и/или в других материалах, поставляемых при распространении.                               */
/*   3. Ни имя владельца авторских прав, ни имена его соратников не могут быть использованы в      */
/*      качестве рекламы или средства продвижения продуктов, основанных на этом ПО без             */
/*      предварительного письменного разрешения.                                                   */
/*                                                                                                 */
/*  ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ "КАК ОНА ЕСТЬ"  */
/*  БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ             */
/*  ОГРАНИЧИВАЯСЬ ИМИ, ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ */
/*  ЦЕЛИ. НИ В КОЕМ СЛУЧАЕ НИ ОДИН ВЛАДЕЛЕЦ АВТОРСКИХ ПРАВ И НИ ОДНО ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ    */
/*  ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО СКАЗАНО ВЫШЕ, НЕ НЕСЁТ              */
/*  ОТВЕТСТВЕННОСТИ, ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ,         */
/*  ВСЛЕДСТВИЕ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ (ВКЛЮЧАЯ, НО НЕ             */
/*  ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ, СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ ПОТЕРЯМИ ПРИНЕСЕННЫМИ   */
/*  ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, ИЛИ ОТКАЗОМ ПРОГРАММЫ РАБОТАТЬ СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ),    */
/*  ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ ДРУГОЕ ЛИЦО БЫЛИ ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.            */
/*                                                                                                 */
/*   ak_skey.h                                                                                     */
/* ----------------------------------------------------------------------------------------------- */
#ifndef __AK_SKEY_H__
#define __AK_SKEY_H__

/* ----------------------------------------------------------------------------------------------- */
 #include <libakrypt.h>

/* ----------------------------------------------------------------------------------------------- */
/* Предварительные описания ключевых структур */
 struct skey;
 struct block_cipher_key;
 struct mac_key;
 struct sign_key;
 struct hybrid_cipher_key;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Указатель на структуру секретного ключа */
 typedef struct skey *ak_skey;
/*! \brief Указатель на структуру ключа блочного алгоритма шифрования */
 typedef struct block_cipher_key *ak_block_cipher_key;
/*! \brief Указатель на структуру ключа алгоритма выработки имитовставки */
 typedef struct mac_key *ak_mac_key;
/*! \brief Указатель на структуру секретного ключа алгоритма выработки электронной подписи */
 typedef struct sign_key *ak_sign_key;
/*! \brief Указатель на структуру секретного ключа алгоритма гибридного шифрования */
 typedef struct hybrid_key *ak_hybrid_key;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Однопараметрическая функция для проведения действий с секретным ключом */
 typedef int ( ak_function_skey )( ak_skey );
/*! \brief Однопараметрическая функция для проведения действий с секретным ключом */
 typedef ak_bool ( ak_function_skey_check )( ak_skey );

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Структура для хранения интервала времени использования ключа */
 typedef struct {
  time_t not_before;
  time_t not_after;
 } ak_time_interval;

/*! \brief Структура для хранения ресурса ключа */
 typedef union {
   ak_uint64 counter;
   ak_time_interval time;
 } ak_resource;

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Класс, реализующий базовый набор данных и функций для секретного ключа */
 struct skey {
  /*! \brief ключ */
   ak_buffer key;
  /*! \brief маска ключа */
   ak_buffer mask;
  /*! \brief генератор случайных масок ключа */
   ak_random generator;
  /*! \brief контрольная сумма ключа */
   ak_buffer icode;
  /*! \brief уникальный номер ключа */
   ak_buffer number;
  /*! \brief указатель на внутренние данные ключа */
   ak_pointer data;
  /*! \brief OID алгоритма для которого предназначен секретный ключ */
   ak_oid oid;
  /*! \brief ресурс использования ключа */
   ak_resource resource;

  /*! \brief указатель на функцию маскирования ключа */
   ak_function_skey *set_mask;
  /*! \brief указатель на функцию изменения маски ключа (перемаскирования) */
   ak_function_skey *remask;
  /*! \brief указатель на функцию вычисления контрольной суммы */
   ak_function_skey *set_icode;
  /*! \brief указатель на функцию проверки контрольной суммы */
   ak_function_skey_check *check_icode;
 };


 /* ----------------------------------------------------------------------------------------------- */
 /*! Функция зашифрования/расширования одного блока информации */
  typedef void ( ak_function_block_cipher_key )( ak_skey, ak_pointer, ak_pointer );

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Класс, реализующий контекст ключа блочного алгоритма шифрования                         */
 struct block_cipher_key {
  /*! \brief Указатель на секретный ключ */
   ak_skey key;
  /*! \brief Длина блока обрабатываемых данных в байтах */
   ak_uint32 block_size;

  /*! \brief Функция заширования одного блока информации */
   ak_function_block_cipher_key *encrypt;
  /*! \brief Функция расширования одного блока информации */
   ak_function_block_cipher_key *decrypt;
  /*! \brief Функция развертки ключа */
   ak_function_skey *shedule_keys;
  /*! \brief Функция уничтожения развернутых ключей */
   ak_function_skey *delete_keys;
};


#endif
/* ----------------------------------------------------------------------------------------------- */
/*                                                                                      ak_skey.h  */
/* ----------------------------------------------------------------------------------------------- */
