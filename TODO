 Действия, которые надо доделать:

 I. класс random

    - необходимо сделать генератор ПСЧ на основе функции хеширования
      (любой из реализованных в библиотеке)
      и использовать этот генератор в примерах
      в качестве генератора по умолчанию

    - необходимо сделать быстрый линейный регистр сдвига
      для генерации масок при блочном шифровании

 II. класс mpzn

    - необходимо реализовать функцию обращения (вычисления обратного)
      в представлении Монтгомери. Это должно быть быстрее, чем возведение
      в степень, кроме того можно будет удалить функцию ak_mpzn_pow_montgomery()

    - давнее пожелание перевести все вычисления на ассемблер под gcc&clang,
      а также MSVC (можно реализовать один код для всех архитектур и
      воспользоваться кроссплатформенным компилятором ассемблера). Это должно
      повысить скорость вычислений.

    - int ak_mpzn_set_random_modulo( )
      сделать корректную реализацию, с правильной вероятностью и потереей случайных знаков


 III. класс wcurve

   - необходимо сделать лесенку Монтгомери для возведения точки в степень,
     это важно при реализации протоколов, где маскирование случайных величин
     не производится.

   - все-таки удалить тестовые параметры кривых из доступного для поиска через
     механизм OID списка. Это позволит запретить пользователям использовать эти
     кривые из приложений.

 IV. класс ak_signkey

  - контроль целостности секретного ключа !!!


 V. вне классов

  - уточнить порядок поиска файла с конфигурацией: сначала HOME, потом /etc
    и что-то надо придумать для Windows

