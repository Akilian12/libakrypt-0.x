/* ----------------------------------------------------------------------------------------------- */
/*  Copyright (c) 2014 - 2018 by Axel Kenzo, axelkenzo@mail.ru                                     */
/*                                                                                                 */
/*  Файл ak_buffer.h                                                                               */
/*  - содержит объявления неэкспортируемых функций для работы с буфферами данных                   */
/* ----------------------------------------------------------------------------------------------- */
#ifndef    __AK_BUFFER_H__
#define    __AK_BUFFER_H__

/* ----------------------------------------------------------------------------------------------- */
 #include <ak_random.h>

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Класс для хранения двоичных данных.

  Класс рассматривается как хранилище данных, для которых контролируется размер и функции
  выделения/освобождения памяти. Класс также может использоваться для хранения строк.              */
/* ----------------------------------------------------------------------------------------------- */
 struct buffer {
   /*! \brief размер данных (в байтах) */
   size_t size;
   /*! \brief указатель на данные */
   ak_pointer data;
   /*! \brief флаг выделения памяти/владения данными */
   ak_bool flag;
   /*! \brief указатель на функцию выделения памяти под данные */
   ak_function_alloc *alloc;
   /*! \brief указатель на функцию освобождения данных */
   ak_function_free *free;
 };

/* ----------------------------------------------------------------------------------------------- */
/*! \brief Инициализация буффера. */
 int ak_buffer_create( ak_buffer );
/*! \brief Инициализация буффера и выделение памяти фиксированного размера. */
 int ak_buffer_create_size( ak_buffer , const size_t );
/*! \brief Инициализация буффера с заданными обработчиками выделения и освобождения памяти. */
 int ak_buffer_create_function_size( ak_buffer ,
                                          ak_function_alloc *, ak_function_free *, const size_t );
/*! \brief Функция освобождает память, выделенную под данные (поле data структуры struct buffer ). */
 int ak_buffer_free( ak_buffer );
/*! \brief Функция выделяет память под данные, хранимые в буффере. */
 int ak_buffer_alloc( ak_buffer , const size_t );
/*! \brief Создание буффера. */
 ak_buffer ak_buffer_new( void );
/*! \brief Уничтожение данных, хранящиеся в полях структуры struct buffer. */
 int ak_buffer_destroy( ak_buffer );
/*! \brief Установка размера буффера в заданное значение. */
 int ak_buffer_set_size( ak_buffer , const size_t );
/*! \brief Проверка, присвоено ли буферу некоторое значение. */
 ak_bool ak_buffer_is_assigned( const ak_buffer );

/*! \brief Зачистка данных, хранящихся в произвольной области памяти. */
 int ak_ptr_wipe( ak_pointer , size_t , ak_random , ak_bool );
/*! \brief Зачистка данных, хранящихся в буффере. */
 int ak_buffer_wipe( ak_buffer, ak_random );
/*! \brief Заполнение буффера случайными данными. */
 int ak_buffer_set_random( ak_buffer , ak_random );

/*! \brief Функция выделения оперативной памяти. */
 ak_pointer ak_libakrypt_alligned_malloc( size_t );

#endif
/* ----------------------------------------------------------------------------------------------- */
/*                                                                                    ak_buffer.h  */
/* ----------------------------------------------------------------------------------------------- */
